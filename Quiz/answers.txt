Take home Quiz: [3 marks per question]

1. What is JWT and how does it work ?

JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. 
When a user logs into a web app, a token is generated. This token contains the user id and acts as a key which authenticates and authorize user activities on a web app.

2. Explain the difference between cookies and tokens in web development.

Tokens are used to send authorization data whereas cookies are used to store and send raw data.

3. How can you secure JWT tokens from being tampered with or decoded ?

i. Give tokens an expiration.
ii. Use HTTPS connections only.
iii. Store and reuse tokens.
iv. Implimenting 2-factor authentication
v. Keep your token secret.

4. What are the advantages of using JWT over traditional session - based authentication ?

i. Stateless and scalable architecture requirements.
ii. APIs, microservices, and decentralized systems.
iii. Cross-domain authentication and reduced communication overhead.

5. How does the concept of statelessness apply to JWT authentication ?

JWT authentication is stateless because it sends requests to the server and relays the response back without storing any information. 

6. What are the common security risks associated with using cookies for authentication ?

Because cookies store and sends data which is the user authentication credentials, hacker can gain access and manipulate the data.

7. How can you implement token - based authentication in a Node.js Express server ?

i. Install jsonwebtoken and other required packages.
ii. Create a JWT_SECRET_KEY
iii. Require JWT in routes and controllers
iv. Create middleware function to verify tokens
v. Create auth middleware to authenticate token
vi. Require and use created middlewares in your server's routes where needed

8. Explain the process of token validation in a Node.js Express server.

The server extracts the token from the incoming request header, then the server uses a secret key to verify the tokens signature. This step ensures that the token was issued by the server and has not been tampered with. The server then validates the token, this verify function also checks the standard claims like exp by default. If the token is valid, the server then proceeds to authorize the request based on the token's payload.
The server rejects the request with an appropriate HTTP status code, when any of the step fails.

9. How can you handle token expiration and renewal in a Node.js Express server ?

i. Create a middleware that decodes the token and checks the exp claim against the current time.
ii. Create a refresh token mechanism
iii. Create a dedicated endpoint in your Express server that accepts refresh tokens. 
iv. Implement middleware in your Express server that intercepts requests with expired tokens.
v.  Ensure that refresh tokens are stored securely, using appropriate measures such as encryption. 

10. Discuss the best practices for storing and managing JWT tokens securely in a web application.

i. Always use HTTPS to protect the token during transmission. This prevents hackers from accessing the token.
ii. Use HttpOnly cookies to store JWT tokens in localStorage or sessionStorage on the client side.
iii.  JWT tokens should have a short expiration time to reduce the risk if a token is compromised. Use refresh tokens to maintain session continuity without forcing the user to log in again.
iv. When signing tokens, use a strong, unique secret key or a public/private key pair for asymmetric algorithms.
v. Always validate the token's signature on the server to ensure it hasn't been tampered with.
vi.  Properly configure CORS settings if your API is accessed from different domains to ensure that tokens are not leaked to unauthorized domains.
